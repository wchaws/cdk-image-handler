// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "CFDistributionUrl": Object {
      "Description": "The CloudFront distribution url",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "Distribution830FAC52",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "ServiceLoadBalancerDNSEC5B149E": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "ServiceLBE9A1ADBC",
          "DNSName",
        ],
      },
    },
    "ServiceServiceURL250C0FB6": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "ServiceLBE9A1ADBC",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Resources": Object {
    "CachePolicy26D8A535": Object {
      "Properties": Object {
        "CachePolicyConfig": Object {
          "DefaultTTL": 86400,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "Name": "CacheAllQueryString",
          "ParametersInCacheKeyAndForwardedToOrigin": Object {
            "CookiesConfig": Object {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": false,
            "EnableAcceptEncodingGzip": false,
            "HeadersConfig": Object {
              "HeaderBehavior": "none",
            },
            "QueryStringsConfig": Object {
              "QueryStringBehavior": "all",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "Distribution830FAC52": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "Comment": "test distribution",
          "DefaultCacheBehavior": Object {
            "CachePolicyId": Object {
              "Ref": "CachePolicy26D8A535",
            },
            "Compress": true,
            "OriginRequestPolicyId": Object {
              "Ref": "OriginRequestPolicy3EFDB4FA",
            },
            "TargetOriginId": "testDistributionOrigin1F4407531",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "ServiceLBE9A1ADBC",
                  "DNSName",
                ],
              },
              "Id": "testDistributionOrigin1F4407531",
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "EcsDefaultClusterMnL3mNNYNVpc18E0451A": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "OriginRequestPolicy3EFDB4FA": Object {
      "Properties": Object {
        "OriginRequestPolicyConfig": Object {
          "CookiesConfig": Object {
            "CookieBehavior": "none",
          },
          "HeadersConfig": Object {
            "HeaderBehavior": "none",
          },
          "Name": "ForwardAllQueryString",
          "QueryStringsConfig": Object {
            "QueryStringBehavior": "all",
          },
        },
      },
      "Type": "AWS::CloudFront::OriginRequestPolicy",
    },
    "Service9571FDD8": Object {
      "DependsOn": Array [
        "ServiceLBPublicListenerECSGroup0CC8688C",
        "ServiceLBPublicListener46709EAA",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "EcsDefaultClusterMnL3mNNYNVpc18E0451A",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 2,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "web",
            "ContainerPort": 8080,
            "TargetGroupArn": Object {
              "Ref": "ServiceLBPublicListenerECSGroup0CC8688C",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "ServiceSecurityGroupEEA09B68",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VpcPrivateSubnet1Subnet536B997A",
              },
              Object {
                "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "ServiceTaskDef1922A00F",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ServiceLBE9A1ADBC": Object {
      "DependsOn": Array [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet2DefaultRoute97F91067",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ServiceLBSecurityGroupF7435A5C",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
          },
          Object {
            "Ref": "VpcPublicSubnet2Subnet691E08A3",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ServiceLBPublicListener46709EAA": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ServiceLBPublicListenerECSGroup0CC8688C",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ServiceLBE9A1ADBC",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ServiceLBPublicListenerECSGroup0CC8688C": Object {
      "Properties": Object {
        "HealthCheckPath": "/",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ServiceLBSecurityGroupF7435A5C": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB testServiceLB586D6618",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ServiceLBSecurityGrouptotestServiceSecurityGroup5150CB518080B252CBA9": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceLBSecurityGroupF7435A5C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ServiceSecurityGroupEEA09B68": Object {
      "Properties": Object {
        "GroupDescription": "test/Service/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ServiceSecurityGroupfromtestServiceLBSecurityGroup070396498080F83BA643": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceLBSecurityGroupF7435A5C",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ServiceTaskDef1922A00F": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "SRC_BUCKET",
                "Value": Object {
                  "Ref": "SrcBucket613E28A1",
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ".dkr.ecr.",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  Object {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/aws-cdk/assets:ca26583fdc82aeb998d0e482b3e2e44376f6abe8ab70bd580dff52502d168e3e",
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "ServiceTaskDefwebLogGroup2A898F61",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "Service",
              },
            },
            "Name": "web",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "ServiceTaskDefExecutionRole919F7BE3",
            "Arn",
          ],
        },
        "Family": "testServiceTaskDef70FA6280",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "ServiceTaskDefTaskRole0CFE2F57",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ServiceTaskDefExecutionRole919F7BE3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServiceTaskDefExecutionRoleDefaultPolicy3073559D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/aws-cdk/assets",
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ServiceTaskDefwebLogGroup2A898F61",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ServiceTaskDefExecutionRoleDefaultPolicy3073559D",
        "Roles": Array [
          Object {
            "Ref": "ServiceTaskDefExecutionRole919F7BE3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ServiceTaskDefTaskRole0CFE2F57": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServiceTaskDefTaskRoleDefaultPolicy9CCB4F8E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SrcBucket613E28A1",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SrcBucket613E28A1",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ServiceTaskDefTaskRoleDefaultPolicy9CCB4F8E",
        "Roles": Array [
          Object {
            "Ref": "ServiceTaskDefTaskRole0CFE2F57",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ServiceTaskDefwebLogGroup2A898F61": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "SrcBucket613E28A1": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2RouteTable94F7E489": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
}
`;
